-- UUID Support
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- FAKULTAS
CREATE TABLE fakultas (
    id SERIAL PRIMARY KEY,
    nama_fakultas VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PROGRAM STUDI
CREATE TABLE program_studi (
    id INTEGER PRIMARY KEY,
    fakultas_id INTEGER REFERENCES fakultas(id) ON DELETE CASCADE,
    nama_prodi VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- USERS TABLE
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nomor_induk VARCHAR(20) UNIQUE NOT NULL, -- Diperbesar untuk fleksibilitas
    password VARCHAR(255) NOT NULL,
    nama VARCHAR(150) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    role VARCHAR(20) CHECK (role IN ('admin', 'dosen', 'mahasiswa')) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    no_hp VARCHAR(15),
    ttd_path VARCHAR(255),
    signature_upload_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP
);

-- MAHASISWA
CREATE TABLE mahasiswa (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    fakultas_id INTEGER REFERENCES fakultas(id),
    program_studi_id INTEGER REFERENCES program_studi(id),
    semester INTEGER CHECK (semester >= 1 AND semester <= 14) -- Validasi semester
);

-- DOSEN
CREATE TABLE dosen (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    fakultas_id INTEGER REFERENCES fakultas(id), -- Tambah relasi fakultas
    gelar_depan VARCHAR(255),
    gelar_belakang VARCHAR(255),
    jabatan VARCHAR(100)
);

-- JENIS PERMOHONAN
CREATE TABLE jenis_permohonan (
    id SERIAL PRIMARY KEY,
    nama_jenis_permohonan VARCHAR(255) NOT NULL,
    deskripsi TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PERMOHONAN
CREATE TABLE permohonan (
    id SERIAL PRIMARY KEY,
    id_jenis_permohonan INTEGER REFERENCES jenis_permohonan(id),
    id_mahasiswa UUID REFERENCES mahasiswa(user_id),
    id_dosen UUID REFERENCES dosen(user_id),
    judul VARCHAR(255) NOT NULL, -- Tambah judul permohonan
    deskripsi TEXT, -- Tambah deskripsi permohonan
    file_path VARCHAR(255),
    file_name VARCHAR(255),
    file_signed_path VARCHAR(255),
    komentar TEXT,
    komentar_penolakan TEXT, -- Pisahkan komentar penolakan
    qr_code_data TEXT,
    qr_code_path VARCHAR(255), -- Tambah path QR code
    status_permohonan VARCHAR(30) CHECK (status_permohonan IN ('pending', 'disetujui', 'ditolak', 'ditandatangani', 'selesai')) DEFAULT 'pending',
    approved_at TIMESTAMP, -- Waktu persetujuan
    signed_at TIMESTAMP, -- Waktu penandatanganan
    rejected_at TIMESTAMP, -- Waktu penolakan
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- HISTORY / LOG PENANDATANGANAN
CREATE TABLE history (
    id SERIAL PRIMARY KEY,
    permohonan_id INTEGER REFERENCES permohonan(id) ON DELETE CASCADE, -- Relasi ke permohonan
    id_jenis_permohonan INTEGER REFERENCES jenis_permohonan(id),
    id_mahasiswa UUID REFERENCES mahasiswa(user_id),
    id_dosen UUID REFERENCES dosen(user_id),
    action VARCHAR(50) NOT NULL, -- 'created', 'approved', 'rejected', 'signed'
    signature_hash VARCHAR(255),
    qr_code_path VARCHAR(255),
    signed_at TIMESTAMP,
    komentar_permohonan TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- NOTIFICATIONS
CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    permohonan_id INTEGER REFERENCES permohonan(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(50) NOT NULL, -- 'new_request', 'approved', 'rejected', 'signed'
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- INDEXES untuk performa
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_nomor_induk ON users(nomor_induk);
CREATE INDEX idx_permohonan_status ON permohonan(status_permohonan);
CREATE INDEX idx_permohonan_mahasiswa ON permohonan(id_mahasiswa);
CREATE INDEX idx_permohonan_dosen ON permohonan(id_dosen);
CREATE INDEX idx_notifications_user ON notifications(user_id, is_read);
CREATE INDEX idx_history_permohonan ON history(permohonan_id);

-- TRIGGERS untuk updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_fakultas_updated_at BEFORE UPDATE ON fakultas
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_program_studi_updated_at BEFORE UPDATE ON program_studi
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_permohonan_updated_at BEFORE UPDATE ON permohonan
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- VIEWS untuk mempermudah query

-- VIEW untuk list mahasiswa lengkap
CREATE VIEW v_mahasiswa AS
SELECT 
    u.id as user_id,
    u.nomor_induk, -- NIM mahasiswa
    u.nama,
    u.email,
    u.no_hp,
    u.is_active,
    m.semester,
    f.id as fakultas_id,
    f.nama_fakultas,
    ps.id as program_studi_id,
    ps.nama_prodi,
    u.ttd_path,
    u.signature_upload_at,
    u.created_at,
    u.last_login
FROM users u
JOIN mahasiswa m ON u.id = m.user_id
JOIN fakultas f ON m.fakultas_id = f.id
JOIN program_studi ps ON m.program_studi_id = ps.id
WHERE u.role = 'mahasiswa';

-- VIEW untuk list dosen lengkap
CREATE VIEW v_dosen AS
SELECT 
    u.id as user_id,
    u.nomor_induk, -- NIP dosen
    u.nama,
    u.email,
    u.no_hp,
    u.is_active,
    d.gelar_depan,
    d.gelar_belakang,
    CASE 
        WHEN d.gelar_depan IS NOT NULL AND d.gelar_belakang IS NOT NULL THEN
            CONCAT(d.gelar_depan, ' ', u.nama, ' ', d.gelar_belakang)
        WHEN d.gelar_depan IS NOT NULL THEN
            CONCAT(d.gelar_depan, ' ', u.nama)
        WHEN d.gelar_belakang IS NOT NULL THEN
            CONCAT(u.nama, ' ', d.gelar_belakang)
        ELSE u.nama
    END as nama_lengkap,
    d.jabatan,
    f.id as fakultas_id,
    f.nama_fakultas,
    u.ttd_path,
    u.signature_upload_at,
    u.created_at,
    u.last_login
FROM users u
JOIN dosen d ON u.id = d.user_id
LEFT JOIN fakultas f ON d.fakultas_id = f.id
WHERE u.role = 'dosen';

-- VIEW untuk list admin
CREATE VIEW v_admin AS
SELECT 
    u.id as user_id,
    u.nomor_induk,
    u.nama,
    u.email,
    u.no_hp,
    u.is_active,
    u.created_at,
    u.last_login
FROM users u
WHERE u.role = 'admin';

-- VIEW untuk permohonan detail
CREATE VIEW v_permohonan_detail AS
SELECT 
    p.id,
    p.judul,
    p.deskripsi,
    jp.nama_jenis_permohonan,
    
    -- Data Mahasiswa
    vm.nomor_induk as nomor_induk_mahasiswa,
    vm.nama as nama_mahasiswa,
    vm.email as email_mahasiswa,
    vm.nama_fakultas as fakultas_mahasiswa,
    vm.nama_prodi,
    vm.semester,
    
    -- Data Dosen
    vd.nomor_induk as nomor_induk_dosen,
    vd.nama_lengkap as nama_dosen,
    vd.email as email_dosen,
    vd.jabatan as jabatan_dosen,
    vd.nama_fakultas as fakultas_dosen,
    
    -- Data Permohonan
    p.status_permohonan,
    p.file_name,
    p.file_path,
    p.file_signed_path,
    p.komentar,
    p.komentar_penolakan,
    p.qr_code_data,
    p.qr_code_path,
    p.created_at as tanggal_pengajuan,
    p.approved_at as tanggal_disetujui,
    p.signed_at as tanggal_ditandatangani,
    p.rejected_at as tanggal_ditolak,
    p.updated_at
FROM permohonan p
JOIN jenis_permohonan jp ON p.id_jenis_permohonan = jp.id
JOIN v_mahasiswa vm ON p.id_mahasiswa = vm.user_id
JOIN v_dosen vd ON p.id_dosen = vd.user_id;

-- VIEW untuk dashboard statistik
CREATE VIEW v_dashboard_stats AS
SELECT 
    (SELECT COUNT(*) FROM v_mahasiswa WHERE is_active = true) as total_mahasiswa_aktif,
    (SELECT COUNT(*) FROM v_dosen WHERE is_active = true) as total_dosen_aktif,
    (SELECT COUNT(*) FROM permohonan WHERE status_permohonan = 'pending') as permohonan_pending,
    (SELECT COUNT(*) FROM permohonan WHERE status_permohonan = 'disetujui') as permohonan_disetujui,
    (SELECT COUNT(*) FROM permohonan WHERE status_permohonan = 'ditolak') as permohonan_ditolak,
    (SELECT COUNT(*) FROM permohonan WHERE status_permohonan = 'ditandatangani') as permohonan_ditandatangani,
    (SELECT COUNT(*) FROM permohonan WHERE status_permohonan = 'selesai') as permohonan_selesai,
    (SELECT COUNT(*) FROM permohonan WHERE DATE(created_at) = CURRENT_DATE) as permohonan_hari_ini;

-- VIEW untuk notifikasi yang belum dibaca per user
CREATE VIEW v_notifications_unread AS
SELECT 
    n.user_id,
    u.nama,
    u.role,
    COUNT(*) as unread_count
FROM notifications n
JOIN users u ON n.user_id = u.id
WHERE n.is_read = false
GROUP BY n.user_id, u.nama, u.role;

-- VIEW untuk history permohonan lengkap
CREATE VIEW v_history_detail AS
SELECT 
    h.id,
    h.permohonan_id,
    p.judul as judul_permohonan,
    jp.nama_jenis_permohonan,
    vm.nomor_induk as nomor_induk_mahasiswa,
    vm.nama as nama_mahasiswa,
    vd.nama_lengkap as nama_dosen,
    h.action,
    h.signature_hash,
    h.qr_code_path,
    h.signed_at,
    h.komentar_permohonan,
    h.created_at
FROM history h
LEFT JOIN permohonan p ON h.permohonan_id = p.id
LEFT JOIN jenis_permohonan jp ON h.id_jenis_permohonan = jp.id
LEFT JOIN v_mahasiswa vm ON h.id_mahasiswa = vm.user_id
LEFT JOIN v_dosen vd ON h.id_dosen = vd.user_id
ORDER BY h.created_at DESC;